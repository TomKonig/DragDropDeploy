version: '3.9'

# Production oriented compose file focusing on stricter network & container security.

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ddd
      POSTGRES_PASSWORD: change_me # override via secret in real deployment
      POSTGRES_DB: ddd
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [internal]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ddd"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 512M

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    networks: [internal]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  backend:
    build: ./backend
    environment:
      NODE_ENV: production
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [internal, proxy]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: false # backend writes migrations/logs; revisit when external logging in place
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.example.com`)"
      - "traefik.http.routers.api.entrypoints=websecure,web"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=le"
      - "traefik.http.services.api.loadbalancer.server.port=3000"

  frontend:
    build: ./frontend
    networks: [proxy]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`app.example.com`)"
      - "traefik.http.routers.app.entrypoints=websecure,web"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=le"

  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=false" # disable in prod or protect with auth
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=change@example.com"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.websecure.http.tls=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks: [proxy]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp

volumes:
  pgdata: {}
  redisdata: {}
  traefik_letsencrypt: {}

networks:
  internal:
    internal: true
  proxy: {}
