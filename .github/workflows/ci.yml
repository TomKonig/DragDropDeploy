name: CI

on:
  push:
    branches: [ main, feature/** ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-test:
    name: Lint / Type Check / Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ddd
          POSTGRES_PASSWORD: ddd
          POSTGRES_DB: ddd
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ddd" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # Monorepo uses a single root package-lock.json (npm workspaces) so we can cache it directly
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies (workspace root)
        run: npm ci
      - name: Generate Prisma Client
        run: npm run prisma:generate -w backend
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://ddd:ddd@localhost:5432/ddd
        run: npm test -w backend -- --runInBand
      - name: Build backend
        run: npm run build -w backend
      - name: Build shared (explicit)
        run: npm run build -w @dragdropdeploy/shared
      - name: Build frontend
        run: npm run build -w frontend
      # Placeholder lint (add ESLint when config present)
      # - name: Lint
      #   run: npm run lint
      # Optional Snyk scans (enable with SNYK_TOKEN secret):
      # - name: Snyk Code Scan
      #   uses: snyk/actions/node@master
      #   with:
      #     command: test
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # - name: Snyk Open Source Scan
      #   uses: snyk/actions/node@master
      #   with:
      #     command: monitor
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  security-snyk:
    name: Snyk Security Scan
    needs: build-test
    if: ${{ secrets.SNYK_TOKEN != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci --omit=dev
      - name: Snyk Code (SAST) Scan
        uses: snyk/actions/node@master
        with:
          command: code test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Snyk Open Source (SCA) Test
        uses: snyk/actions/node@master
        with:
          command: test --all-projects --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Snyk Open Source Monitor (optional)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: snyk/actions/node@master
        with:
          command: monitor --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker-images:
    name: Build & Push Images
    needs: build-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract version
        id: vars
        run: echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/dragdropdeploy-backend:${{ steps.vars.outputs.TAG }}
            ghcr.io/${{ github.repository_owner }}/dragdropdeploy-backend:latest
      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/dragdropdeploy-frontend:${{ steps.vars.outputs.TAG }}
            ghcr.io/${{ github.repository_owner }}/dragdropdeploy-frontend:latest
